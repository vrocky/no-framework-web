{
  "version": 3,
  "sources": ["../src/h.ts", "../src/components/TextBox.tsx", "../src/components/TextArea.tsx", "../src/utils/events.ts", "../src/components/Toolbar.tsx", "../src/components/Panel.tsx", "../src/App.tsx", "../gen-index-static.tsx"],
  "sourcesContent": ["import { CustomElement, CustomProps } from './types';\r\n\r\nexport function h(type: string | Function, props: CustomProps | null, ...children: any[]): CustomElement {\r\n    return {\r\n        type,\r\n        props: {\r\n            ...(props || {}),\r\n            children: children.flat().filter(child => child != null)\r\n        }\r\n    };\r\n}\r\n\r\nexport function render(element: CustomElement | string | number): HTMLElement | Text {\r\n    // Handle primitive types\r\n    if (typeof element === 'string' || typeof element === 'number') {\r\n        return document.createTextNode(element.toString());\r\n    }\r\n\r\n    // Handle components\r\n    if (typeof element.type === 'function') {\r\n        let result;\r\n        // Check if it's a class constructor\r\n        if (/^\\s*class\\s+/.test(element.type.toString())) {\r\n            const instance = new element.type(element.props);\r\n            result = instance.render();\r\n        } else {\r\n            // Function component\r\n            result = element.type(element.props);\r\n        }\r\n        return render(result);\r\n    }\r\n\r\n    // Handle DOM elements\r\n    const domElement = document.createElement(element.type as string);\r\n\r\n    // Add properties to the element\r\n    Object.entries(element.props).forEach(([name, value]) => {\r\n        if (name === 'children') return;\r\n        if (name === 'ref' && typeof value === 'function') {\r\n            value(domElement);\r\n        } else if (name.startsWith('on') && typeof value === 'function') {\r\n            const eventName = name.toLowerCase().substring(2);\r\n            domElement.addEventListener(eventName, value);\r\n        } else if (name === 'className') {\r\n            domElement.setAttribute('class', value);\r\n        } else if (name === 'style') {\r\n            domElement.setAttribute('style', value);\r\n        } else {\r\n            domElement.setAttribute(name, value);\r\n        }\r\n    });\r\n\r\n    // Render children\r\n    if (element.props.children) {\r\n        element.props.children.forEach(child => {\r\n            if (child != null) {\r\n                domElement.appendChild(render(child));\r\n            }\r\n        });\r\n    }\r\n\r\n    return domElement;\r\n}\r\n\r\nexport function renderToString(element: CustomElement | string | number): string {\r\n    // Handle primitive types\r\n    if (typeof element === 'string' || typeof element === 'number') {\r\n        return element.toString();\r\n    }\r\n\r\n    // Handle components\r\n    if (typeof element.type === 'function') {\r\n        let result;\r\n        // Check if it's a class constructor\r\n        if (/^\\s*class\\s+/.test(element.type.toString())) {\r\n            const instance = new element.type(element.props);\r\n            result = instance.render();\r\n        } else {\r\n            // Function component\r\n            result = element.type(element.props);\r\n        }\r\n        return renderToString(result);\r\n    }\r\n\r\n    // Handle DOM elements\r\n    const tag = element.type as string;\r\n    const props = element.props || {};\r\n    \r\n    // Build props string\r\n    let propsString = '';\r\n    Object.entries(props).forEach(([name, value]) => {\r\n        if (name === 'children') return;\r\n        if (name === 'className') {\r\n            propsString += ` class=\"${value}\"`;\r\n        } else if (name === 'style' && typeof value === 'object') {\r\n            const styleString = Object.entries(value)\r\n                .map(([key, val]) => `${key}:${val}`)\r\n                .join(';');\r\n            propsString += ` style=\"${styleString}\"`;\r\n        } else if (!name.startsWith('on')) { // Skip event handlers\r\n            propsString += ` ${name}=\"${value}\"`;\r\n        }\r\n    });\r\n\r\n    // Handle self-closing tags\r\n    const selfClosingTags = ['img', 'input', 'br', 'hr', 'meta', 'link'];\r\n    if (selfClosingTags.includes(tag)) {\r\n        return `<${tag}${propsString} />`;\r\n    }\r\n\r\n    // Handle children\r\n    let childrenString = '';\r\n    if (props.children) {\r\n        childrenString = props.children\r\n            .filter((child: any) => child != null)\r\n            .map((child: any) => renderToString(child))\r\n            .join('');\r\n    }\r\n\r\n    return `<${tag}${propsString}>${childrenString}</${tag}>`;\r\n}\r\n\r\nconst DEBUG = false;\r\n\r\nfunction log(...args: any[]) {\r\n    if (DEBUG) console.log('[Hydrate]:', ...args);\r\n}\r\n\r\nconst eventListenersMap = new WeakMap<HTMLElement, Record<string, EventListener>>();\r\n\r\nfunction updateProps(domElement: HTMLElement, props: Record<string, any>) {\r\n    const previousListeners = eventListenersMap.get(domElement) || {};\r\n    const newListeners: Record<string, EventListener> = {};\r\n\r\n    Object.entries(props).forEach(([name, value]) => {\r\n        if (name === 'children') return;\r\n\r\n        if (name.startsWith('on') && typeof value === 'function') {\r\n            const eventName = name.toLowerCase().substring(2);\r\n            if (previousListeners[eventName]) {\r\n                domElement.removeEventListener(eventName, previousListeners[eventName]);\r\n            }\r\n            domElement.addEventListener(eventName, value);\r\n            newListeners[eventName] = value;\r\n        } else if (name === 'className') {\r\n            if (domElement.className !== value) {\r\n                domElement.className = value;\r\n            }\r\n        } else if (name === 'style') {\r\n            if (typeof value === 'string' && domElement.getAttribute('style') !== value) {\r\n                domElement.setAttribute('style', value);\r\n            } else if (typeof value === 'object') {\r\n                Object.assign(domElement.style, value);\r\n            }\r\n        } else if (name !== 'ref') {\r\n            const currentValue = domElement.getAttribute(name);\r\n            if (currentValue !== value?.toString()) {\r\n                domElement.setAttribute(name, value);\r\n            }\r\n        }\r\n    });\r\n\r\n    eventListenersMap.set(domElement, newListeners);\r\n\r\n    // Handle ref after all other props are set\r\n    if (props.ref && typeof props.ref === 'function') {\r\n        props.ref(domElement);\r\n    }\r\n}\r\n\r\nfunction reconcileChildren(parent: HTMLElement, newChildren: any[]) {\r\n    const existingChildren = Array.from(parent.childNodes);\r\n    const maxLen = Math.max(newChildren.length, existingChildren.length);\r\n\r\n    for (let i = 0; i < maxLen; i++) {\r\n        const newChild = newChildren[i];\r\n        const existingChild = existingChildren[i];\r\n\r\n        if (newChild == null && existingChild) {\r\n            existingChild.remove();\r\n        } else if (newChild != null && !existingChild) {\r\n            parent.appendChild(render(newChild));\r\n        } else if (newChild != null && existingChild) {\r\n            hydrate(newChild, existingChild as HTMLElement | Text);\r\n        }\r\n    }\r\n}\r\n\r\nexport function hydrate(element: CustomElement | string | number, container: HTMLElement | Text) {\r\n    try {\r\n        if (typeof element === 'string' || typeof element === 'number') {\r\n            if (!(container instanceof Text)) {\r\n                const parent = container.parentNode;\r\n                const textNode = document.createTextNode(element.toString());\r\n                if (parent) {\r\n                    parent.replaceChild(textNode, container);\r\n                }\r\n            } else if (container.textContent !== element.toString()) {\r\n                container.textContent = element.toString();\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (typeof element.type === 'function') {\r\n            let result;\r\n            if (/^\\s*class\\s+/.test(element.type.toString())) {\r\n                const instance = new element.type(element.props);\r\n                result = instance.render();\r\n            } else {\r\n                result = element.type(element.props);\r\n            }\r\n            hydrate(result, container);\r\n            return;\r\n        }\r\n\r\n        if (!(container instanceof HTMLElement)) {\r\n            throw new Error('Container must be an HTMLElement for non-text nodes');\r\n        }\r\n\r\n        if (container.tagName.toLowerCase() !== (element.type as string).toLowerCase()) {\r\n            const parent = container.parentNode;\r\n            const newNode = render(element);\r\n            if (parent) {\r\n                parent.replaceChild(newNode, container);\r\n            }\r\n            return;\r\n        }\r\n\r\n        updateProps(container, element.props);\r\n        reconcileChildren(container, element.props.children || []);\r\n\r\n    } catch (error) {\r\n        console.error('Hydration error:', error);\r\n        const parent = container.parentNode;\r\n        if (parent) {\r\n            const newNode = render(element);\r\n            parent.replaceChild(newNode, container);\r\n        }\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h } from '../h';\r\n\r\nexport class TextBox {\r\n    private inputRef: HTMLInputElement | null = null;\r\n\r\n    getText(): string {\r\n        return this.inputRef ? this.inputRef.value.trim() : '';\r\n    }\r\n\r\n    clear() {\r\n        if (this.inputRef) {\r\n            this.inputRef.value = '';\r\n        }\r\n    }\r\n\r\n    append(text: string) {\r\n        if (this.inputRef) {\r\n            this.inputRef.value += text;\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <input \r\n                type=\"text\" \r\n                ref={(el:any) => (this.inputRef = el)}\r\n                placeholder=\"Type text here...\"\r\n                style=\"padding: 8px; flex: 1; border: 1px solid #ddd;\"\r\n            />\r\n        );\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h } from '../h';\r\n\r\nexport class TextArea {\r\n    private textAreaRef: HTMLTextAreaElement | null = null;\r\n\r\n    getText(): string {\r\n        return this.textAreaRef ? this.textAreaRef.value : '';\r\n    }\r\n\r\n    clear() {\r\n        if (this.textAreaRef) {\r\n            this.textAreaRef.value = '';\r\n        }\r\n    }\r\n\r\n    append(text: string) {\r\n        if (this.textAreaRef) {\r\n            const currentPos = this.textAreaRef.selectionStart;\r\n            const currentValue = this.textAreaRef.value;\r\n            this.textAreaRef.value = currentValue.substring(0, currentPos) + text + currentValue.substring(currentPos);\r\n            this.textAreaRef.selectionStart = this.textAreaRef.selectionEnd = currentPos + text.length;\r\n            this.textAreaRef.focus();\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <textarea\r\n                ref={(el) => (this.textAreaRef = el)}\r\n                placeholder=\"Your text will appear here...\"\r\n                style=\"padding: 8px; width: 100%; height: 150px; border: 1px solid #ddd; margin-top: 10px; resize: vertical;\"\r\n            />\r\n        );\r\n    }\r\n}\r\n", "export type Disposable = {\r\n    dispose: () => void;\r\n};\r\n\r\nexport type EventHandler<T = void> = (event: T) => void;\r\n\r\nexport class EventEmitter<T = void> {\r\n    private handlers: EventHandler<T>[] = [];\r\n\r\n    fire(event?: T): void {\r\n        this.handlers.forEach(handler => handler(event as T));\r\n    }\r\n\r\n    on(handler: EventHandler<T>): Disposable {\r\n        this.handlers.push(handler);\r\n        return {\r\n            dispose: () => {\r\n                const index = this.handlers.indexOf(handler);\r\n                if (index > -1) {\r\n                    this.handlers.splice(index, 1);\r\n                }\r\n            }\r\n        };\r\n    }\r\n\r\n    dispose(): void {\r\n        this.handlers = [];\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h } from '../h';\r\nimport { EventEmitter, Disposable } from '../utils/events';\r\n\r\nexport class Toolbar {\r\n    private readonly _onClick = new EventEmitter<void>();\r\n\r\n    onDidClick(callback: () => void): Disposable {\r\n        return this._onClick.on(callback);  // Pass the callback directly\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <button \r\n                onClick={() => this._onClick.fire()}  \r\n                style=\"\r\n                    padding: 8px 16px;\r\n                    background: #0078d4;\r\n                    color: white;\r\n                    border: none;\r\n                    border-radius: 4px;\r\n                    cursor: pointer;\r\n                    font-size: 14px;\r\n                    transition: background 0.2s;\r\n                \"\r\n            >\r\n                Add\r\n            </button>\r\n        );\r\n    }\r\n\r\n    dispose(): void {\r\n        this._onClick.dispose();\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h } from '../h';\r\nimport { TextBox } from './TextBox';\r\nimport { TextArea } from './TextArea';\r\nimport { Toolbar } from './Toolbar';\r\nimport { Disposable } from '../utils/events';\r\n\r\nexport class Panel {\r\n    private textBox: TextBox;\r\n    private textArea: TextArea;\r\n    private toolbar: Toolbar;\r\n    private disposables: Disposable[] = [];\r\n\r\n    constructor() {\r\n        this.textBox = new TextBox();\r\n        this.textArea = new TextArea();\r\n        this.toolbar = new Toolbar();\r\n\r\n        // Register event listener and store disposable\r\n        this.disposables.push(\r\n            this.toolbar.onDidClick(() => {\r\n                const text = this.textBox.getText();\r\n                if (text) {\r\n                    this.textArea.append(text + \"\\n\");\r\n                    this.textBox.clear();\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    dispose(): void {\r\n        this.disposables.forEach(d => d.dispose());\r\n        this.disposables = [];\r\n        this.toolbar.dispose();\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return (\r\n            <div style=\"padding: 20px; max-width: 600px; margin: auto;\">\r\n                <div style=\"display: flex; gap: 10px; align-items: start;\">\r\n                    {this.textBox.render()}\r\n                    {this.toolbar.render()}\r\n                </div>\r\n                {this.textArea.render()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h } from './h';\r\nimport { Panel } from './components/Panel';\r\n\r\nexport class App {\r\n    private rootElement: HTMLElement | null = null;\r\n\r\n    setRoot(element: HTMLElement) {\r\n        this.rootElement = element;\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        return <Panel />;\r\n    }\r\n}\r\n", "/** @jsx h */\r\nimport { h, renderToString } from \"./src/h\";\r\nimport { App } from \"./src/App\";\r\nimport { readFileSync, writeFileSync } from \"fs\";\r\nimport { JSDOM } from \"jsdom\";\r\n\r\n// Read the template HTML file\r\nconst template = readFileSync(\"./index.html\", \"utf-8\");\r\n\r\n// Parse HTML using jsdom\r\nconst dom = new JSDOM(template);\r\nconst document = dom.window.document;\r\n\r\n// Find the app root div\r\nconst appRoot = document.querySelector(\"#app\");\r\n\r\nif (!appRoot) {\r\n    throw new Error(\"\u274C Error: <div id='app'></div> not found in index.html\");\r\n}\r\n\r\n// Create an instance of App and render it\r\nconst app = new App();\r\nconst appHtml = renderToString(app.render());\r\n\r\n// Replace content inside the #app div\r\nappRoot.innerHTML = appHtml;\r\n\r\n// Write the modified HTML back to `dist/index.html`\r\nwriteFileSync(\"./dist/index.html\", dom.serialize());\r\n\r\nconsole.log(\"\u2705 Static HTML successfully generated at dist/index.html\");\r\n"],
  "mappings": "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",
  "names": ["document"]
}
